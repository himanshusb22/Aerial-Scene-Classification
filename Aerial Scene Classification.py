# -*- coding: utf-8 -*-
"""Cosmos_Crew.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qhxIq0o8nUppDf__91amxCuJsQXzBZ9d

#Cosmos_Crew
"""

!pip install -q kaggle

from google.colab import files
files.upload()

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets list

!kaggle datasets download -d jiayuanchengala/aid-scene-classification-datasets

!unzip /content/aid-scene-classification-datasets.zip

"""Model creation

**Importing all need libraries**
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split

import keras
from keras.layers import Flatten,Dense
from keras.models import Model
from keras.applications.vgg19 import VGG19, preprocess_input
from keras.preprocessing.image import ImageDataGenerator

"""**Downloading VGG19 pretrained model**"""

base_model=VGG19(input_shape=(600,600,3),include_top=False)

for layer in base_model.layers:
  layer.trainable=False

"""**Connecting base model to output layer having two classes**"""

X=Flatten()(base_model.output)
X=Dense(units=30,activation='softmax')(X)

model=Model(base_model.input,X)
model.compile(optimizer='adam',loss=keras.losses.binary_crossentropy,metrics=['accuracy'])
model.summary()

"""**Preprocessing the train data**"""

datagen=ImageDataGenerator(featurewise_center=True,
                                 rotation_range=0.4,
                                 width_shift_range=0.3,
                                 horizontal_flip=True,
                                 preprocessing_function=preprocess_input,
                                 zoom_range=0.4,
                                 shear_range=0.4,
                                 validation_split=0.1
                                 )

# generating batches of training and validation data
train_generator = datagen.flow_from_directory(
    '/content/AID',
    target_size=(600, 600),
    batch_size=32,
    subset='training'
)

val_generator = datagen.flow_from_directory(
    '/content/AID',
    target_size=(600, 600),
    batch_size=32,
    subset='validation'
)

train_generator.class_indices
val_generator.class_indices

"""**Visulizing the data**"""

t_img,label=train_generator.next()

def plot_images(img_array,lable):
  for idx,img in enumerate( img_array ):
    if idx<=10:
      plt.figure(figsize=(2,2))
      plt.imshow(img)
      plt.title(img.shape)
      plt.axis=False
      plt.show()

t_img

plot_images(t_img,label)

"""**Training the model weights**"""

from keras.callbacks import ModelCheckpoint , EarlyStopping
model_check=ModelCheckpoint(filepath='./best_model.h5',
                   monitor='accuracy',
                   verbose=1,
                   save_best_only=True)
early_stop=EarlyStopping(monitor='accuracy',
                 min_delta=0.01,
                 patience=5,
                 verbose=1)
call_back=[model_check,early_stop]

history=model.fit(train_generator,steps_per_epoch=10, epochs=30, callbacks=call_back)

l=list({'Airport': 0,
 'BareLand': 1,
 'BaseballField': 2,
 'Beach': 3,
 'Bridge': 4,
 'Center': 5,
 'Church': 6,
 'Commercial': 7,
 'DenseResidential': 8,
 'Desert': 9,
 'Farmland': 10,
 'Forest': 11,
 'Industrial': 12,
 'Meadow': 13,
 'MediumResidential': 14,
 'Mountain': 15,
 'Park': 16,
 'Parking': 17,
 'Playground': 18,
 'Pond': 19,
 'Port': 20,
 'RailwayStation': 21,
 'Resort': 22,
 'River': 23,
 'School': 24,
 'SparseResidential': 25,
 'Square': 26,
 'Stadium': 27,
 'StorageTanks': 28,
 'Viaduct': 29})

"""**Defining the function for predicting the class**"""

def predict(img):
  img=Image.open(img)
  img=np.array(img)
  img=preprocess_input(img)
  input_arr=np.array([img])
  input_arr.shape
  pred=np.argmax(model.predict(input_arr))
  for i,j in enumerate(l):
    if pred==i:
      return j

"""**Getting validation score**"""

file_dict={'filename':val_generator.filepaths}
df=pd.DataFrame(file_dict)

def classify(x):
  list=x.split('/')
  for i,j in enumerate(l):
    if j in list:
      return i

df['class']=df['filename'].apply(classify)

df['pred_class']=df['filename'].apply(predict)

def class_to_number(x):
  for i,j in enumerate(l):
    if x==j:
      return i

df

df['pred_class']=df['pred_class'].apply(class_to_number)

"""**F1 score**"""

print(f1_score(df['class'],df['pred_class'],average='macro'))

from keras.models import load_model

model=load_model('/content/best_model.h5')

h=history.history
h.keys()

plt.plot(h['loss'])
plt.plot(h['accuracy'])
# plt.plot(h['accuracy'])
plt.title('loss vs accuracy')
plt.xlabel('Steps')
plt.ylabel('Percent change')
plt.legend(["Loss","Accuracy"])
plt.show()